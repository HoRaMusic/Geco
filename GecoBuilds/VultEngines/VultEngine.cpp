
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "VultEngine.h"

void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.w1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Noise_pinker_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

float Noise_pinker(Noise__ctx_type_0 &_ctx, float x){
   float b0;
   b0 = 0.0277129863191f;
   float b1;
   b1 = 0.0277129863191f;
   float a1;
   a1 = -0.944574027362f;
   float w0;
   w0 = (x + (- (a1 * _ctx.w1)));
   float y0;
   y0 = ((b0 * w0) + (b1 * _ctx.w1));
   _ctx.w1 = w0;
   return y0;
}

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   Noise__ctx_type_0_init(_ctx._inst2);
   _output_ = _ctx;
   return ;
}

void Noise_process_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

float Noise_process(Noise__ctx_type_1 &_ctx, float color){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768);
   float y2;
   y2 = (int_to_float(_ctx.x2) * 3.0517578125e-05f);
   float out;
   uint8_t _cond_3;
   _cond_3 = (color > 0.5f);
   if(_cond_3){ out = Noise_pinker(_ctx._inst2,(y1 + (- y2))); }
   else
   { out = (y1 + (- y2)); }
   return (2.f * out);
}

float Util_sampleRateScale(){
   return (44100.f / getSampleRate());
}

void Util__ctx_type_2_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.x0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_3 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.5f);
   _ctx.x0 = x1;
   return result;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_4 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_48;
   _cond_48 = (x <= -0.666666666667f);
   if(_cond_48){
      return -0.666666666667f;
   }
   else
   {
      uint8_t _cond_47;
      _cond_47 = (x >= 0.666666666667f);
      if(_cond_47){
         return 0.666666666667f;
      }
      else
      {
         return (1.17391304348f * (x + (-0.333333333333f * x * x * x)));
      }
   }
}

float Util_stanh(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Util_stanh_c0)[index] + (x * (float_wrap_array(Util_stanh_c1)[index] + (float_wrap_array(Util_stanh_c2)[index] * x))));
}

float Util_sine(float x){
   int index;
   index = int_clip(float_to_int((100.f * x)),0,100);
   return (float_wrap_array(Util_sine_c0)[index] + (x * (float_wrap_array(Util_sine_c1)[index] + (float_wrap_array(Util_sine_c2)[index] * x))));
}

float Util_saturate(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Util_saturate_c0)[index] + (x * (float_wrap_array(Util_saturate_c1)[index] + (float_wrap_array(Util_saturate_c2)[index] * x))));
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_10_init(Util__ctx_type_10 &_output_){
   Util__ctx_type_10 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_10 &_output_){
   Util__ctx_type_10_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_10 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_11_init(Util__ctx_type_11 &_output_){
   Util__ctx_type_11 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_11 &_output_){
   Util__ctx_type_11_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_11 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

float Util_cvToPitch(float cv){
   return ((cv * 120.f) + 24.f);
}

float Util_cvToperiodUnit(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiodUnit_c0)[index] + (cv * (float_wrap_array(Util_cvToperiodUnit_c1)[index] + (float_wrap_array(Util_cvToperiodUnit_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

float Util_pitchToRateUnit(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRateUnit_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRateUnit_c1)[index] + (float_wrap_array(Util_pitchToRateUnit_c2)[index] * pitch))));
}

float Util_cvToRateUnit(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(Util_cvToRateUnit_c0)[index] + (cv * (float_wrap_array(Util_cvToRateUnit_c1)[index] + (float_wrap_array(Util_cvToRateUnit_c2)[index] * cv))));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

void Util__ctx_type_20_init(Util__ctx_type_20 &_output_){
   Util__ctx_type_20 _ctx;
   _ctx.rate = 0.f;
   Util__ctx_type_4_init(_ctx._inst29);
   Util__ctx_type_4_init(_ctx._inst28);
   _output_ = _ctx;
   return ;
}

void Util_cvToRate_init(Util__ctx_type_20 &_output_){
   Util__ctx_type_20_init(_output_);
   return ;
}

float Util_cvToRate(Util__ctx_type_20 &_ctx, float cv){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_50;
   _cond_50 = (Util_change(_ctx._inst28,cv) || Util_change(_ctx._inst29,fs));
   if(_cond_50){
      _ctx.rate = (Util_cvToRateUnit(cv) / fs);
   }
   return _ctx.rate;
}

void Util__ctx_type_21_init(Util__ctx_type_21 &_output_){
   Util__ctx_type_21 _ctx;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Util_simple_noise_init(Util__ctx_type_21 &_output_){
   Util__ctx_type_21_init(_output_);
   return ;
}

float Util_simple_noise(Util__ctx_type_21 &_ctx){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   return y1;
}

float Util_polylog(float x){
   float xx;
   xx = float_clip(x,0.f,1.f);
   return ((2.f + (- xx)) * xx);
}

float Util_shaper(float x){
   float pos;
   float sign;
   uint8_t _cond_51;
   _cond_51 = (x >= 0.f);
   if(_cond_51){
      pos = x;
      sign = 1.f;
   }
   else
   {
      pos = (- x);
      sign = -1.f;
   }
   float y;
   uint8_t _cond_52;
   _cond_52 = (pos < 1.f);
   if(_cond_52){ y = ((2.f + (- pos)) * pos); }
   else
   { y = 1.f; }
   return (y * sign);
}

float Util_fadeA(float x){
   int index;
   index = int_clip(float_to_int((31.f * x)),0,31);
   return (float_wrap_array(Util_fadeA_c0)[index] + (x * (float_wrap_array(Util_fadeA_c1)[index] + (float_wrap_array(Util_fadeA_c2)[index] * x))));
}

float Util_fadeB(float x){
   int index;
   index = int_clip(float_to_int((31.f * x)),0,31);
   return (float_wrap_array(Util_fadeB_c0)[index] + (x * (float_wrap_array(Util_fadeB_c1)[index] + (float_wrap_array(Util_fadeB_c2)[index] * x))));
}

void Util__ctx_type_26_init(Util__ctx_type_26 &_output_){
   Util__ctx_type_26 _ctx;
   _ctx.y2 = 0.f;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder2_4x_init(Util__ctx_type_26 &_output_){
   Util__ctx_type_26_init(_output_);
   return ;
}

void Util_upsampleOrder2_4x(Util__ctx_type_26 &_ctx, float y0, _tuple___real_real_real__ &_output_){
   float p2;
   p2 = ((0.15625f * y0) + (0.9375f * _ctx.y1) + (-0.09375f * _ctx.y2));
   float p1;
   p1 = ((0.375f * y0) + (0.75f * _ctx.y1) + (-0.125f * _ctx.y2));
   float p0;
   p0 = ((0.65625f * y0) + (0.4375f * _ctx.y1) + (-0.09375f * _ctx.y2));
   float _tmp_53_0;
   _tmp_53_0 = _ctx.y1;
   float _tmp_53_1;
   _tmp_53_1 = y0;
   _ctx.y2 = _tmp_53_0;
   _ctx.y1 = _tmp_53_1;
   _tuple___real_real_real__ _tuple_54;
   {
      _tuple_54.field_0 = p2;
      _tuple_54.field_1 = p1;
      _tuple_54.field_2 = p0;
   }
   _output_ = _tuple_54;
   return ;
}

void Util__ctx_type_27_init(Util__ctx_type_27 &_output_){
   Util__ctx_type_27 _ctx;
   _ctx.y2 = 0.f;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder2_2x_init(Util__ctx_type_27 &_output_){
   Util__ctx_type_27_init(_output_);
   return ;
}

float Util_upsampleOrder2_2x(Util__ctx_type_27 &_ctx, float y0){
   float p0;
   p0 = ((0.375f * y0) + (0.75f * _ctx.y1) + (-0.125f * _ctx.y2));
   float _tmp_56_0;
   _tmp_56_0 = _ctx.y1;
   float _tmp_56_1;
   _tmp_56_1 = y0;
   _ctx.y2 = _tmp_56_0;
   _ctx.y1 = _tmp_56_1;
   return p0;
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444444444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

void Util__ctx_type_29_init(Util__ctx_type_29 &_output_){
   Util__ctx_type_29 _ctx;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder1_4x_init(Util__ctx_type_29 &_output_){
   Util__ctx_type_29_init(_output_);
   return ;
}

void Util_upsampleOrder1_4x(Util__ctx_type_29 &_ctx, float y0, _tuple___real_real_real__ &_output_){
   float p2;
   p2 = ((y0 + (3.f * _ctx.y1)) * 0.25f);
   float p1;
   p1 = ((y0 + _ctx.y1) * 0.5f);
   float p0;
   p0 = (((3.f * y0) + _ctx.y1) * 0.25f);
   _ctx.y1 = y0;
   _tuple___real_real_real__ _tuple_57;
   {
      _tuple_57.field_0 = p2;
      _tuple_57.field_1 = p1;
      _tuple_57.field_2 = p0;
   }
   _output_ = _tuple_57;
   return ;
}

void Util__ctx_type_30_init(Util__ctx_type_30 &_output_){
   Util__ctx_type_30 _ctx;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder1_2x_init(Util__ctx_type_30 &_output_){
   Util__ctx_type_30_init(_output_);
   return ;
}

float Util_upsampleOrder1_2x(Util__ctx_type_30 &_ctx, float y0){
   float p0;
   p0 = ((y0 + _ctx.y1) * 0.5f);
   _ctx.y1 = y0;
   return p0;
}

void Util__ctx_type_31_init(Util__ctx_type_31 &_output_){
   Util__ctx_type_31 _ctx;
   float_init_array(32,0.f,_ctx.z);
   _ctx.index = 0;
   _output_ = _ctx;
   return ;
}

void Util_decimate_4x_do_init(Util__ctx_type_31 &_output_){
   Util__ctx_type_31_init(_output_);
   return ;
}

float Util_decimate_4x_do(Util__ctx_type_31 &_ctx, float x){
   float coeff[32];
   {
      coeff[0] = -0.0141811689213f;
      coeff[1] = -0.0197443826146f;
      coeff[2] = -0.0234695564557f;
      coeff[3] = -0.024608797997f;
      coeff[4] = -0.0225882614699f;
      coeff[5] = -0.0170771755778f;
      coeff[6] = -0.00803640953463f;
      coeff[7] = 0.00425913785228f;
      coeff[8] = 0.0192275357882f;
      coeff[9] = 0.0360165149192f;
      coeff[10] = 0.0535671679991f;
      coeff[11] = 0.0706991874936f;
      coeff[12] = 0.0862098987626f;
      coeff[13] = 0.0989778313456f;
      coeff[14] = 0.108060976859f;
      coeff[15] = 0.112780281507f;
      coeff[16] = 0.112780281507f;
      coeff[17] = 0.108060976859f;
      coeff[18] = 0.0989778313456f;
      coeff[19] = 0.0862098987626f;
      coeff[20] = 0.0706991874936f;
      coeff[21] = 0.0535671679991f;
      coeff[22] = 0.0360165149192f;
      coeff[23] = 0.0192275357882f;
      coeff[24] = 0.00425913785228f;
      coeff[25] = -0.00803640953463f;
      coeff[26] = -0.0170771755778f;
      coeff[27] = -0.0225882614699f;
      coeff[28] = -0.024608797997f;
      coeff[29] = -0.0234695564557f;
      coeff[30] = -0.0197443826146f;
      coeff[31] = -0.0141811689213f;
   }
   _ctx.z[_ctx.index] = x;
   int count;
   int i;
   float out;
   count = 0;
   i = _ctx.index;
   out = 0.f;
   while(count < 32){
      out = (out + (_ctx.z[i] * coeff[count]));
      count = (count + 1);
      uint8_t _cond_61;
      _cond_61 = (i == 0);
      if(_cond_61){ i = 31; }
      else
      { i = (i + (-1)); }
   }
   _ctx.index = ((_ctx.index + 1) % 32);
   return out;
}

void Util_decimate_4x_skip_init(Util__ctx_type_31 &_output_){
   Util__ctx_type_31_init(_output_);
   return ;
}

void Util_decimate_4x_skip(Util__ctx_type_31 &_ctx, float x){
   _ctx.z[_ctx.index] = x;
   _ctx.index = ((_ctx.index + 1) % 32);
}

void Util__ctx_type_32_init(Util__ctx_type_32 &_output_){
   Util__ctx_type_32 _ctx;
   float_init_array(32,0.f,_ctx.z);
   _ctx.index = 0;
   _output_ = _ctx;
   return ;
}

void Util_decimate_2x_do_init(Util__ctx_type_32 &_output_){
   Util__ctx_type_32_init(_output_);
   return ;
}

float Util_decimate_2x_do(Util__ctx_type_32 &_ctx, float x){
   float coeff[32];
   {
      coeff[0] = -0.0205141096584f;
      coeff[1] = -0.0172601498343f;
      coeff[2] = -0.00450723565518f;
      coeff[3] = 0.0126537637879f;
      coeff[4] = 0.0261095379162f;
      coeff[5] = 0.0282196492364f;
      coeff[6] = 0.015603662007f;
      coeff[7] = -0.0084630025825f;
      coeff[8] = -0.0342823554271f;
      coeff[9] = -0.0488065105196f;
      coeff[10] = -0.0405574383468f;
      coeff[11] = -0.00453204098441f;
      coeff[12] = 0.0549134037508f;
      coeff[13] = 0.124522730781f;
      coeff[14] = 0.186001732548f;
      coeff[15] = 0.221992869407f;
      coeff[16] = 0.221992869407f;
      coeff[17] = 0.186001732548f;
      coeff[18] = 0.124522730781f;
      coeff[19] = 0.0549134037508f;
      coeff[20] = -0.00453204098441f;
      coeff[21] = -0.0405574383468f;
      coeff[22] = -0.0488065105196f;
      coeff[23] = -0.0342823554271f;
      coeff[24] = -0.0084630025825f;
      coeff[25] = 0.015603662007f;
      coeff[26] = 0.0282196492364f;
      coeff[27] = 0.0261095379162f;
      coeff[28] = 0.0126537637879f;
      coeff[29] = -0.00450723565518f;
      coeff[30] = -0.0172601498343f;
      coeff[31] = -0.0205141096584f;
   }
   _ctx.z[_ctx.index] = x;
   int count;
   int i;
   float out;
   count = 0;
   i = _ctx.index;
   out = 0.f;
   while(count < 32){
      out = (out + (_ctx.z[i] * coeff[count]));
      count = (count + 1);
      uint8_t _cond_65;
      _cond_65 = (i == 0);
      if(_cond_65){ i = 31; }
      else
      { i = (i + (-1)); }
   }
   _ctx.index = ((_ctx.index + 1) % 32);
   return out;
}

void Util_decimate_2x_skip_init(Util__ctx_type_32 &_output_){
   Util__ctx_type_32_init(_output_);
   return ;
}

void Util_decimate_2x_skip(Util__ctx_type_32 &_ctx, float x){
   _ctx.z[_ctx.index] = x;
   _ctx.index = ((_ctx.index + 1) % 32);
}

void Saw_ptr2__ctx_type_0_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_20_init(_ctx._inst96);
   Util__ctx_type_4_init(_ctx._inst94);
   _output_ = _ctx;
   return ;
}

void Saw_ptr2_process_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0_init(_output_);
   return ;
}

float Saw_ptr2_process(Saw_ptr2__ctx_type_0 &_ctx, float cv){
   uint8_t _cond_101;
   _cond_101 = Util_change(_ctx._inst94,cv);
   if(_cond_101){
      _ctx.rate = Util_cvToRate(_ctx._inst96,cv);
   }
   float out;
   float s1;
   s1 = _ctx.rate;
   float s2;
   s2 = (s1 + _ctx.rate);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   uint8_t _cond_104;
   _cond_104 = (_ctx.phase > 1.f);
   if(_cond_104){ _ctx.phase = (_ctx.phase + -1.f); }
   uint8_t _cond_103;
   _cond_103 = (_ctx.phase < s1);
   if(_cond_103){
      float d;
      d = (_ctx.phase / _ctx.rate);
      out = (1.f + (d * ((- d) + s2)));
   }
   else
   {
      uint8_t _cond_102;
      _cond_102 = (_ctx.phase < s2);
      if(_cond_102){
         float d;
         d = (_ctx.phase / _ctx.rate);
         out = (3.f + (d * (-4.f + d + s2)));
      }
      else
      {
         out = ((2.f * _ctx.phase) + -1.f);
      }
   }
   return out;
}

float Saturate_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Saturate_tanh_table_c0)[index] + (x * (float_wrap_array(Saturate_tanh_table_c1)[index] + (float_wrap_array(Saturate_tanh_table_c2)[index] * x))));
}

float Saturate_process(float x){
   return Saturate_tanh_table(x);
}

void Short_delay__ctx_type_0_init(Short_delay__ctx_type_0 &_output_){
   Short_delay__ctx_type_0 _ctx;
   _ctx.x4 = 0.f;
   _ctx.x3 = 0.f;
   _ctx.x2 = 0.f;
   _output_ = _ctx;
   return ;
}

void Short_delay_soft_init(Short_delay__ctx_type_0 &_output_){
   Short_delay__ctx_type_0_init(_output_);
   return ;
}

float Short_delay_soft(Short_delay__ctx_type_0 &_ctx, float x1){
   float o;
   o = ((x1 + _ctx.x2 + _ctx.x3 + _ctx.x4) * 0.25f);
   float _tmp_112_0;
   _tmp_112_0 = x1;
   float _tmp_112_1;
   _tmp_112_1 = _ctx.x2;
   float _tmp_112_2;
   _tmp_112_2 = _ctx.x3;
   _ctx.x2 = _tmp_112_0;
   _ctx.x3 = _tmp_112_1;
   _ctx.x4 = _tmp_112_2;
   return o;
}

void Short_delay__ctx_type_1_init(Short_delay__ctx_type_1 &_output_){
   Short_delay__ctx_type_1 _ctx;
   _ctx.write_pos = 0;
   float_init_array(22050,0.f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

void Short_delay_do_init(Short_delay__ctx_type_1 &_output_){
   Short_delay__ctx_type_1_init(_output_);
   return ;
}

float Short_delay_do(Short_delay__ctx_type_1 &_ctx, float x, float time, float feedback){
   time = float_clip(time,0.f,1.f);
   feedback = float_clip(feedback,0.f,1.f);
   float index_r;
   index_r = (22050.f * time);
   int index_i;
   index_i = float_to_int(floorf(index_r));
   int delta;
   delta = (_ctx.write_pos + (- index_i));
   int read_pos;
   uint8_t _cond_113;
   _cond_113 = (delta < 0);
   if(_cond_113){ read_pos = (22050 + delta); }
   else
   { read_pos = delta; }
   float decimal;
   decimal = (index_r + (- int_to_float(index_i)));
   float x1;
   x1 = float_get(_ctx.buffer,read_pos);
   float x2;
   x2 = float_get(_ctx.buffer,((read_pos + 1) % 22050));
   float ret;
   ret = (((x2 + (- x1)) * decimal) + x1);
   _ctx.write_pos = ((_ctx.write_pos + 1) % 22050);
   float_set(_ctx.buffer,_ctx.write_pos,Saturate_process((x + (feedback * ret))));
   return ret;
}

void Short_delay__ctx_type_2_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2 _ctx;
   Short_delay__ctx_type_1_init(_ctx._inst111);
   Short_delay__ctx_type_0_init(_ctx._inst110);
   _output_ = _ctx;
   return ;
}

void Short_delay_process_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2_init(_output_);
   return ;
}

float Short_delay_process(Short_delay__ctx_type_2 &_ctx, float x, float time, float feedback){
   return Short_delay_do(_ctx._inst111,x,Short_delay_soft(_ctx._inst110,time),feedback);
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.direction = 0;
   Util__ctx_type_2_init(_ctx._inst118);
   Util__ctx_type_2_init(_ctx._inst117);
   Util__ctx_type_4_init(_ctx._inst115);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.f;
   uint8_t _cond_126;
   _cond_126 = Util_change(_ctx._inst115,cv);
   if(_cond_126){
      _ctx.rate = (4.f * Util_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_127;
   if(_ctx.direction){ _if_127 = _ctx.rate; }
   else
   { _if_127 = (- _ctx.rate); }
   new_phase = (_ctx.phase + _if_127);
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   uint8_t _cond_128;
   _cond_128 = (Util_edge(_ctx._inst117,(reset > 0.f)) || Util_edge(_ctx._inst118,bdisable));
   if(_cond_128){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = 1;
      new_phase = 0.f;
   }
   uint8_t _cond_130;
   _cond_130 = (new_phase > 1024.f);
   if(_cond_130){
      new_phase = (1024.f + (- (new_phase + -1024.f)));
      _ctx.direction = 0;
   }
   else
   {
      uint8_t _cond_129;
      _cond_129 = (new_phase < -1024.f);
      if(_cond_129){
         _ctx.direction = 1;
      }
   }
   if(bdisable){ _ctx.phase = 0.f; }
   else
   { _ctx.phase = new_phase; }
   if(_ctx.reset_state){
      uint8_t _cond_132;
      _cond_132 = ((fabsf(_ctx.reset_phase) > 10.f) || bdisable);
      if(_cond_132){
         float reset_speed;
         if(bdisable){ reset_speed = 0.01f; }
         else
         { reset_speed = 0.5f; }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_131;
         _cond_131 = (_ctx.reset_phase > 10.f);
         if(bool_not(_cond_131)){ _ctx.reset_phase = 0.f; }
         _ctx.reset_state = 0;
         _ctx.direction = 1;
      }
      out = _ctx.reset_phase;
   }
   out = (out + _ctx.phase);
   return (out * 0.0009765625f);
}

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.scale = 0.f;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   Util__ctx_type_11_init(_ctx._inst142);
   Util__ctx_type_2_init(_ctx._inst135);
   _output_ = _ctx;
   return ;
}

void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r){
   float a_rate;
   a_rate = (1.f / ((100.f * a) + 0.01f));
   float d_rate;
   d_rate = (1.f / ((100.f * d) + 0.01f));
   float r_rate;
   r_rate = (1.f / ((100.f * r) + 0.01f));
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.004f));
   uint8_t bgate;
   bgate = (gate > 0.f);
   uint8_t _cond_146;
   _cond_146 = (_ctx.state == 0);
   if(_cond_146){
      uint8_t _cond_145;
      _cond_145 = Util_edge(_ctx._inst135,bgate);
      if(_cond_145){
         _ctx.state = 1;
         _ctx.scale = (gate * 0.2f);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0.f;
   }
   uint8_t _cond_149;
   _cond_149 = (_ctx.state == 1);
   if(_cond_149){
      uint8_t _cond_147;
      _cond_147 = bool_not(bgate);
      if(_cond_147){
         _ctx.state = 0;
      }
      uint8_t _cond_148;
      _cond_148 = (_ctx.out > 1024.f);
      if(_cond_148){
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.8f;
   }
   uint8_t _cond_151;
   _cond_151 = (_ctx.state == 2);
   if(_cond_151){
      uint8_t _cond_150;
      _cond_150 = bool_not(bgate);
      if(_cond_150){
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = (s * 1024.f);
   }
   return (Util_smooth(_ctx._inst142,_ctx.scale) * float_clip((_ctx.out * 0.0009765625f),0.f,1.f));
}

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1 _ctx;
   Adsr__ctx_type_0_init(_ctx._inst144);
   _output_ = _ctx;
   return ;
}

void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate, float knob1, float knob2, float knob3, float knob4){
   return Adsr_do(_ctx._inst144,gate,knob1,knob2,knob3,knob4);
}

void Ad__ctx_type_0_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.scale = 0.f;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   Util__ctx_type_2_init(_ctx._inst154);
   _output_ = _ctx;
   return ;
}

void Ad_do_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0_init(_output_);
   return ;
}

float Ad_do(Ad__ctx_type_0 &_ctx, float gate, float a, float d){
   float a_rate;
   a_rate = (1.f / ((100.f * a) + 0.01f));
   float d_rate;
   d_rate = (1.f / ((100.f * d) + 0.01f));
   uint8_t bgate;
   bgate = (gate > 0.f);
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.004f));
   uint8_t _cond_161;
   _cond_161 = (_ctx.state == 0);
   if(_cond_161){
      uint8_t _cond_160;
      _cond_160 = Util_edge(_ctx._inst154,bgate);
      if(_cond_160){
         _ctx.state = 1;
         _ctx.scale = (gate * 0.2f);
      }
      _ctx.rate = d_rate;
      _ctx.target = 0.f;
   }
   uint8_t _cond_163;
   _cond_163 = (_ctx.state == 1);
   if(_cond_163){
      uint8_t _cond_162;
      _cond_162 = (bool_not(bgate) || (_ctx.out > 1024.f));
      if(_cond_162){
         _ctx.state = 0;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.8f;
   }
   return (float_clip((_ctx.out * 0.0009765625f),0.f,1.f) * _ctx.scale);
}

void Ad__ctx_type_1_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1 _ctx;
   Ad__ctx_type_0_init(_ctx._inst159);
   _output_ = _ctx;
   return ;
}

void Ad_process_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

float Ad_process(Ad__ctx_type_1 &_ctx, float gate, float knob1, float knob2){
   return Ad_do(_ctx._inst159,gate,knob1,knob2);
}

float LPFilter_tune(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(LPFilter_tune_c0)[index] + (cut * (float_wrap_array(LPFilter_tune_c1)[index] + (float_wrap_array(LPFilter_tune_c2)[index] * cut))));
}

float LPFilter_tuneFourtyEight(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(LPFilter_tuneFourtyEight_c0)[index] + (cut * (float_wrap_array(LPFilter_tuneFourtyEight_c1)[index] + (float_wrap_array(LPFilter_tuneFourtyEight_c2)[index] * cut))));
}

float LPFilter_tuneNinetySix(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(LPFilter_tuneNinetySix_c0)[index] + (cut * (float_wrap_array(LPFilter_tuneNinetySix_c1)[index] + (float_wrap_array(LPFilter_tuneNinetySix_c2)[index] * cut))));
}

void LPFilter__ctx_type_3_init(LPFilter__ctx_type_3 &_output_){
   LPFilter__ctx_type_3 _ctx;
   _ctx.p3 = 0.f;
   _ctx.p2 = 0.f;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void LPFilter_heun_init(LPFilter__ctx_type_3 &_output_){
   LPFilter__ctx_type_3_init(_output_);
   return ;
}

float LPFilter_heun(LPFilter__ctx_type_3 &_ctx, float input, float fh, float res){
   float wt0;
   wt0 = Util_cubic_clipper((input + (-4.f * res * _ctx.p3)));
   float wt1;
   wt1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = ((wt0 + (- wt1)) * fh);
   float wt3;
   wt3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = ((wt1 + (- wt3)) * fh);
   float wt5;
   wt5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = ((wt3 + (- wt5)) * fh);
   float wt7;
   wt7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = ((wt5 + (- wt7)) * fh);
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * res * pt3)));
   float w1;
   w1 = Util_cubic_clipper(pt0);
   float dp0;
   dp0 = ((w0 + (- w1)) * fh);
   float w3;
   w3 = Util_cubic_clipper(pt1);
   float dp1;
   dp1 = ((w1 + (- w3)) * fh);
   float w5;
   w5 = Util_cubic_clipper(pt2);
   float dp2;
   dp2 = ((w3 + (- w5)) * fh);
   float w7;
   w7 = Util_cubic_clipper(pt3);
   float dp3;
   dp3 = ((w5 + (- w7)) * fh);
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) * 0.5f));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) * 0.5f));
   _ctx.p2 = (_ctx.p2 + ((dp2 + dpt2) * 0.5f));
   _ctx.p3 = (_ctx.p3 + ((dp3 + dpt3) * 0.5f));
   return _ctx.p3;
}

void LPFilter__ctx_type_4_init(LPFilter__ctx_type_4 &_output_){
   LPFilter__ctx_type_4 _ctx;
   _ctx.p3 = 0.f;
   _ctx.p2 = 0.f;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void LPFilter_euler_init(LPFilter__ctx_type_4 &_output_){
   LPFilter__ctx_type_4_init(_output_);
   return ;
}

float LPFilter_euler(LPFilter__ctx_type_4 &_ctx, float input, float fh, float res){
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * res * _ctx.p3)));
   float w1;
   w1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = ((w0 + (- w1)) * fh);
   float w3;
   w3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = ((w1 + (- w3)) * fh);
   float w5;
   w5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = ((w3 + (- w5)) * fh);
   float w7;
   w7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = ((w5 + (- w7)) * fh);
   _ctx.p0 = (_ctx.p0 + dpt0);
   _ctx.p1 = (_ctx.p1 + dpt1);
   _ctx.p2 = (_ctx.p2 + dpt2);
   _ctx.p3 = (_ctx.p3 + dpt3);
   return _ctx.p3;
}

void LPFilter__ctx_type_5_init(LPFilter__ctx_type_5 &_output_){
   LPFilter__ctx_type_5 _ctx;
   _ctx.fh = 0.f;
   LPFilter__ctx_type_4_init(_ctx.e);
   Util__ctx_type_4_init(_ctx._inst170);
   _output_ = _ctx;
   return ;
}

void LPFilter_process_euler_init(LPFilter__ctx_type_5 &_output_){
   LPFilter__ctx_type_5_init(_output_);
   return ;
}

float LPFilter_process_euler(LPFilter__ctx_type_5 &_ctx, float input, float cut, float res){
   uint8_t _cond_190;
   _cond_190 = Util_change(_ctx._inst170,cut);
   if(_cond_190){
      uint8_t _cond_189;
      _cond_189 = (getSampleRate() == 44100.f);
      if(_cond_189){
         _ctx.fh = LPFilter_tune(cut);
      }
      else
      {
         uint8_t _cond_188;
         _cond_188 = (getSampleRate() == 48000.f);
         if(_cond_188){
            _ctx.fh = LPFilter_tuneFourtyEight(cut);
         }
         else
         {
            uint8_t _cond_187;
            _cond_187 = (getSampleRate() == 96000.f);
            if(_cond_187){
               _ctx.fh = LPFilter_tuneNinetySix(cut);
            }
         }
      }
   }
   LPFilter_euler(_ctx.e,input,_ctx.fh,res);
   LPFilter_euler(_ctx.e,input,_ctx.fh,res);
   LPFilter_euler(_ctx.e,input,_ctx.fh,res);
   float out;
   out = LPFilter_euler(_ctx.e,input,_ctx.fh,res);
   return out;
}

void LPFilter__ctx_type_6_init(LPFilter__ctx_type_6 &_output_){
   LPFilter__ctx_type_6 _ctx;
   LPFilter__ctx_type_3_init(_ctx.h);
   _ctx.fh = 0.f;
   Util__ctx_type_4_init(_ctx._inst178);
   _output_ = _ctx;
   return ;
}

void LPFilter_process_heun_init(LPFilter__ctx_type_6 &_output_){
   LPFilter__ctx_type_6_init(_output_);
   return ;
}

float LPFilter_process_heun(LPFilter__ctx_type_6 &_ctx, float input, float cut, float res){
   uint8_t _cond_194;
   _cond_194 = Util_change(_ctx._inst178,cut);
   if(_cond_194){
      uint8_t _cond_193;
      _cond_193 = (getSampleRate() == 44100.f);
      if(_cond_193){
         _ctx.fh = LPFilter_tune(cut);
      }
      else
      {
         uint8_t _cond_192;
         _cond_192 = (getSampleRate() == 48000.f);
         if(_cond_192){
            _ctx.fh = LPFilter_tuneFourtyEight(cut);
         }
         else
         {
            uint8_t _cond_191;
            _cond_191 = (getSampleRate() == 96000.f);
            if(_cond_191){
               _ctx.fh = LPFilter_tuneNinetySix(cut);
            }
         }
      }
   }
   LPFilter_heun(_ctx.h,input,_ctx.fh,res);
   LPFilter_heun(_ctx.h,input,_ctx.fh,res);
   LPFilter_heun(_ctx.h,input,_ctx.fh,res);
   float out;
   out = LPFilter_heun(_ctx.h,input,_ctx.fh,res);
   return out;
}

void LPFilter__ctx_type_7_init(LPFilter__ctx_type_7 &_output_){
   LPFilter__ctx_type_7 _ctx;
   _ctx.reso = 0.f;
   _ctx.cut = 0.f;
   LPFilter__ctx_type_6_init(_ctx._inst186);
   _output_ = _ctx;
   return ;
}

void LPFilter_process_init(LPFilter__ctx_type_7 &_output_){
   LPFilter__ctx_type_7_init(_output_);
   return ;
}

float LPFilter_process(LPFilter__ctx_type_7 &_ctx, float inputIn, float cvMixIn, float resoIn){
   float input;
   input = (inputIn * 0.2f);
   _ctx.cut = cvMixIn;
   _ctx.reso = resoIn;
   float filterOut;
   filterOut = LPFilter_process_heun(_ctx._inst186,input,_ctx.cut,_ctx.reso);
   return (filterOut * 5.f);
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0.f;
   Util__ctx_type_2_init(_ctx._inst196);
   _output_ = _ctx;
   return ;
}

void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate){
   float a_rate;
   a_rate = (1.f / ((100.f * rate) + 0.01f));
   uint8_t bgate;
   bgate = (gate > 0.5f);
   _ctx.out = (_ctx.out + (((end * 1024.f) + (- _ctx.out)) * rate * 0.004f));
   uint8_t _cond_198;
   _cond_198 = Util_edge(_ctx._inst196,bgate);
   if(_cond_198){
      _ctx.out = (start * 1024.f);
   }
   return (_ctx.out * 0.0009765625f);
}

float Tables_nsine(float x){
   int index;
   index = int_clip(float_to_int((127.f * x)),0,127);
   return (float_wrap_array(Tables_nsine_c0)[index] + (x * (float_wrap_array(Tables_nsine_c1)[index] + (float_wrap_array(Tables_nsine_c2)[index] * x))));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst203);
   Util__ctx_type_4_init(_ctx._inst201);
   _output_ = _ctx;
   return ;
}

void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset){
   uint8_t _cond_204;
   _cond_204 = Util_change(_ctx._inst201,cv);
   if(_cond_204){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   uint8_t _cond_205;
   _cond_205 = Util_edge(_ctx._inst203,(reset > 0.5f));
   if(_cond_205){ _ctx.phase = 0.f; }
   else
   { _ctx.phase = (_ctx.phase + _ctx.rate); }
   uint8_t _cond_206;
   _cond_206 = (_ctx.phase > 1024.f);
   if(_cond_206){ _ctx.phase = (_ctx.phase + -1024.f); }
   return (_ctx.phase * 0.0009765625f);
}

void Sine__ctx_type_0_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0 _ctx;
   _ctx.trig = 0;
   Phase__ctx_type_0_init(_ctx.p);
   Util__ctx_type_2_init(_ctx._inst208);
   _output_ = _ctx;
   return ;
}

void Sine_process_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

float Sine_process(Sine__ctx_type_0 &_ctx, float cv, float reset){
   uint8_t _cond_211;
   _cond_211 = Util_edge(_ctx._inst208,(reset > 0.5f));
   if(_cond_211){
      _ctx.trig = 1;
   }
   float phase;
   phase = Phase_process(_ctx.p,cv,0.f);
   uint8_t _cond_212;
   _cond_212 = ((phase < 1e-18f) && _ctx.trig);
   if(_cond_212){
      _ctx.trig = 0;
      Phase_process(_ctx.p,cv,0.f);
   }
   return Tables_nsine(phase);
}

void Sawcore_ptr_w2(float phase, float rate, _tuple___bool_real__ &_output_){
   _tuple___bool_real__ out;
   float s1;
   s1 = rate;
   float s2;
   s2 = (s1 + rate);
   uint8_t _cond_237;
   _cond_237 = (phase < s1);
   if(_cond_237){
      float d;
      d = (phase / rate);
      float t2;
      t2 = (s2 * 0.0009765625f);
      {
         out.field_0 = 0;
         out.field_1 = (1.f + (d * ((- d) + t2)));
      }
   }
   else
   {
      uint8_t _cond_236;
      _cond_236 = (phase < s2);
      if(_cond_236){
         float d;
         d = (phase / rate);
         float t2;
         t2 = (s2 * 0.0009765625f);
         {
            out.field_0 = 0;
            out.field_1 = (3.f + (d * (-4.f + d + t2)));
         }
      }
      else
      {
         {
            out.field_0 = 1;
            out.field_1 = 0.f;
         }
      }
   }
   _output_ = out;
   return ;
}

void Sawcore__ctx_type_1_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst221);
   Util__ctx_type_4_init(_ctx._inst219);
   Sawcore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Sawcore_process_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

float Sawcore_process(Sawcore__ctx_type_1 &_ctx, float cv, float reset){
   float transition;
   transition = 0.f;
   float out;
   out = 0.f;
   uint8_t _cond_238;
   _cond_238 = Util_change(_ctx._inst219,cv);
   if(_cond_238){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   float new_phase;
   new_phase = (_ctx.phase + _ctx.rate);
   uint8_t do_reset;
   do_reset = Util_edge(_ctx._inst221,(reset > 0.f));
   uint8_t do_wrap;
   do_wrap = (new_phase > 1024.f);
   uint8_t _cond_239;
   _cond_239 = (do_reset || do_wrap);
   if(_cond_239){
      _ctx.reset_phase = _ctx.phase;
      if(do_wrap){ new_phase = (new_phase + -1024.f); }
      else
      { new_phase = 0.f; }
      _ctx.reset_state = 1;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if(_ctx.reset_state){
      uint8_t done;
      float ptr;
      _tuple___bool_real__ _call_240;
      Sawcore_ptr_w2(_ctx.phase,_ctx.rate,_call_240);
      done = _call_240.field_0;ptr = _call_240.field_1;
      transition = ((ptr + 1.f) * 0.5f * _ctx.reset_phase);
      if(done){
         _ctx.reset_state = 0;
      }
      else
      {
         out = transition;
      }
   }
   return ((0.001953125f * out) + -1.f);
}

void Sawcore_noteOn_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_noteOn(Sawcore__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Sawcore_noteOff_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_noteOff(Sawcore__ctx_type_1 &_ctx, int note, int channel){
}

void Sawcore_controlChange_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_controlChange(Sawcore__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Sawcore_default_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_default(Sawcore__ctx_type_1 &_ctx){
   _ctx.rate = 0.759366720147f;
}

void Saw_ptr1__ctx_type_0_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_20_init(_ctx._inst253);
   Util__ctx_type_4_init(_ctx._inst251);
   _output_ = _ctx;
   return ;
}

void Saw_ptr1_process_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0_init(_output_);
   return ;
}

float Saw_ptr1_process(Saw_ptr1__ctx_type_0 &_ctx, float cv){
   uint8_t _cond_256;
   _cond_256 = Util_change(_ctx._inst251,cv);
   if(_cond_256){
      _ctx.rate = Util_cvToRate(_ctx._inst253,cv);
   }
   float out;
   float s1;
   s1 = _ctx.rate;
   float dc;
   dc = -1.f;
   _ctx.phase = (_ctx.phase + _ctx.rate);
   uint8_t _cond_258;
   _cond_258 = (_ctx.phase > 1.f);
   if(_cond_258){ _ctx.phase = (_ctx.phase + -1.f); }
   uint8_t _cond_257;
   _cond_257 = (_ctx.phase < s1);
   if(_cond_257){
      float d;
      d = (_ctx.phase / _ctx.rate);
      out = ((-2.f * d) + 2.f + dc);
   }
   else
   {
      out = ((2.f * _ctx.phase) + (- dc));
   }
   return out;
}

void Saw_eptr__ctx_type_0_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_20_init(_ctx._inst269);
   Util__ctx_type_20_init(_ctx._inst262);
   Util__ctx_type_4_init(_ctx._inst260);
   Saw_eptr_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Saw_eptr_process_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

float Saw_eptr_process(Saw_eptr__ctx_type_0 &_ctx, float cv){
   float y;
   y = 0.f;
   uint8_t _cond_270;
   _cond_270 = Util_change(_ctx._inst260,cv);
   if(_cond_270){
      _ctx.rate = Util_cvToRate(_ctx._inst262,cv);
   }
   _ctx.phase = (_ctx.phase + (_ctx.rate * 2.f));
   uint8_t _cond_271;
   _cond_271 = (_ctx.phase > (1.f + (- _ctx.rate)));
   if(_cond_271){
      y = (_ctx.phase + (- (_ctx.phase / _ctx.rate)) + (1.f / _ctx.rate) + -1.f);
      _ctx.phase = (_ctx.phase + -2.f);
   }
   else
   {
      y = _ctx.phase;
   }
   return y;
}

void Saw_eptr_noteOn_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

void Saw_eptr_noteOn(Saw_eptr__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Saw_eptr_noteOff_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

void Saw_eptr_noteOff(Saw_eptr__ctx_type_0 &_ctx, int note, int channel){
}

void Saw_eptr_controlChange_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

void Saw_eptr_controlChange(Saw_eptr__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Saw_eptr_default_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

void Saw_eptr_default(Saw_eptr__ctx_type_0 &_ctx){
   _ctx.rate = Util_cvToRate(_ctx._inst269,0.f);
}

void Saw_blit__ctx_type_0_init(Saw_blit__ctx_type_0 &_output_){
   Saw_blit__ctx_type_0 _ctx;
   _ctx.scale = 0.f;
   _ctx.new_m = 0;
   _ctx.m = 0;
   Util__ctx_type_4_init(_ctx._inst273);
   Saw_blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Saw_blit_pulse_train_init(Saw_blit__ctx_type_0 &_output_){
   Saw_blit__ctx_type_0_init(_output_);
   return ;
}

float Saw_blit_pulse_train(Saw_blit__ctx_type_0 &_ctx, float cv, float phase){
   uint8_t _cond_288;
   _cond_288 = Util_change(_ctx._inst273,cv);
   if(_cond_288){
      _ctx.new_m = ((2 * float_to_int(Util_cvToperiod(cv))) + 1);
      _ctx.scale = (2.f * Util_cvToperiod(cv));
   }
   float pi_phase;
   pi_phase = (phase * 0.5f);
   float denominator;
   denominator = Tables_nsine(pi_phase);
   uint8_t _cond_289;
   _cond_289 = ((_ctx.new_m != _ctx.m) && (denominator < 0.1f));
   if(_cond_289){
      _ctx.m = _ctx.new_m;
   }
   float out;
   out = 0.f;
   uint8_t _cond_290;
   _cond_290 = (denominator <= 1e-18f);
   if(_cond_290){
      out = 1.f;
   }
   else
   {
      float m_phase;
      m_phase = fmodf((int_to_float(_ctx.m) * pi_phase),1.f);
      float numerator;
      numerator = Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));
   }
   return out;
}

void Saw_blit_pulse_start_init(Saw_blit__ctx_type_0 &_output_){
   Saw_blit__ctx_type_0_init(_output_);
   return ;
}

void Saw_blit_pulse_start(Saw_blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 1349.49206955f;
}

void Saw_blit__ctx_type_1_init(Saw_blit__ctx_type_1 &_output_){
   Saw_blit__ctx_type_1 _ctx;
   _ctx.state = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.output = 0.f;
   Util__ctx_type_20_init(_ctx._inst286);
   Util__ctx_type_10_init(_ctx._inst284);
   Saw_blit__ctx_type_0_init(_ctx._inst283);
   Util__ctx_type_20_init(_ctx._inst282);
   Util__ctx_type_4_init(_ctx._inst280);
   Saw_blit_do_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Saw_blit_do_init(Saw_blit__ctx_type_1 &_output_){
   Saw_blit__ctx_type_1_init(_output_);
   return ;
}

float Saw_blit_do(Saw_blit__ctx_type_1 &_ctx, float cv){
   uint8_t _cond_291;
   _cond_291 = Util_change(_ctx._inst280,cv);
   if(_cond_291){
      _ctx.rate = Util_cvToRate(_ctx._inst282,cv);
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   uint8_t _cond_292;
   _cond_292 = (_ctx.phase > 1.f);
   if(_cond_292){ _ctx.phase = (_ctx.phase + -1.f); }
   float pulse;
   pulse = Saw_blit_pulse_train(_ctx._inst283,cv,_ctx.phase);
   _ctx.state = ((_ctx.state * 0.99f) + pulse + (- _ctx.rate));
   _ctx.output = Util_dcblock(_ctx._inst284,_ctx.state);
   return _ctx.output;
}

void Saw_blit_do_default_init(Saw_blit__ctx_type_1 &_output_){
   Saw_blit__ctx_type_1_init(_output_);
   return ;
}

void Saw_blit_do_default(Saw_blit__ctx_type_1 &_ctx){
   _ctx.rate = Util_cvToRate(_ctx._inst286,0.f);
}

void Saw_blit__ctx_type_2_init(Saw_blit__ctx_type_2 &_output_){
   Saw_blit__ctx_type_2 _ctx;
   Saw_blit__ctx_type_1_init(_ctx.osc);
   _output_ = _ctx;
   return ;
}

void Saw_blit_process_init(Saw_blit__ctx_type_2 &_output_){
   Saw_blit__ctx_type_2_init(_output_);
   return ;
}

float Saw_blit_process(Saw_blit__ctx_type_2 &_ctx, float cv){
   float output;
   output = Saw_blit_do(_ctx.osc,cv);
   return output;
}

float Saturate_soft_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Saturate_soft_tanh_table_c0)[index] + (x * (float_wrap_array(Saturate_soft_tanh_table_c1)[index] + (float_wrap_array(Saturate_soft_tanh_table_c2)[index] * x))));
}

float Saturate_soft_process(float x){
   return Saturate_soft_tanh_table(x);
}

float SVF_calc_g(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(SVF_calc_g_c0)[index] + (cv * (float_wrap_array(SVF_calc_g_c1)[index] + (float_wrap_array(SVF_calc_g_c2)[index] * cv))));
}

float SVF_calc_gFourtyEight(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(SVF_calc_gFourtyEight_c0)[index] + (cv * (float_wrap_array(SVF_calc_gFourtyEight_c1)[index] + (float_wrap_array(SVF_calc_gFourtyEight_c2)[index] * cv))));
}

float SVF_calc_gNinetySix(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(SVF_calc_gNinetySix_c0)[index] + (cv * (float_wrap_array(SVF_calc_gNinetySix_c1)[index] + (float_wrap_array(SVF_calc_gNinetySix_c2)[index] * cv))));
}

void SVF__ctx_type_3_init(SVF__ctx_type_3 &_output_){
   SVF__ctx_type_3 _ctx;
   _ctx.z2 = 0.f;
   _ctx.z1 = 0.f;
   _ctx.inv_den = 0.f;
   _ctx.g = 0.f;
   Util__ctx_type_4_init(_ctx._inst300);
   Util__ctx_type_4_init(_ctx._inst299);
   _ctx.R = 0.f;
   SVF_default(_ctx);
   _output_ = _ctx;
   return ;
}

void SVF_process_init(SVF__ctx_type_3 &_output_){
   SVF__ctx_type_3_init(_output_);
   return ;
}

float SVF_process(SVF__ctx_type_3 &_ctx, float x, float cv, float q, int sel){
   q = (q + 0.5f);
   uint8_t _cond_311;
   _cond_311 = (Util_change(_ctx._inst299,cv) || Util_change(_ctx._inst300,q));
   if(_cond_311){
      uint8_t _cond_310;
      _cond_310 = (getSampleRate() == 44100.f);
      if(_cond_310){
         _ctx.g = SVF_calc_g(cv);
      }
      else
      {
         uint8_t _cond_309;
         _cond_309 = (getSampleRate() == 48000.f);
         if(_cond_309){
            _ctx.g = SVF_calc_gFourtyEight(cv);
         }
         else
         {
            uint8_t _cond_308;
            _cond_308 = (getSampleRate() == 96000.f);
            if(_cond_308){
               _ctx.g = SVF_calc_gNinetySix(cv);
            }
         }
      }
      _ctx.g = SVF_calc_g(cv);
      _ctx.R = (1.f / (2.f * (q + 1e-18f)));
      _ctx.inv_den = (1.f / (1.f + (2.f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = ((x + (- (((2.f * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   float band;
   band = ((_ctx.g * high) + _ctx.z1);
   float low;
   low = ((_ctx.g * band) + _ctx.z2);
   float notch;
   notch = (low + high);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   float output;
   uint8_t _cond_312;
   _cond_312 = (sel == 0);
   if(_cond_312){ output = low; }
   else
   {
      uint8_t _cond_313;
      _cond_313 = (sel == 1);
      if(_cond_313){ output = high; }
      else
      {
         uint8_t _cond_314;
         _cond_314 = (sel == 2);
         if(_cond_314){ output = band; }
         else
         { output = notch; }
      }
   }
   return Saturate_soft_process(output);
}

void SVF_default_init(SVF__ctx_type_3 &_output_){
   SVF__ctx_type_3_init(_output_);
   return ;
}

void SVF_default(SVF__ctx_type_3 &_ctx){
   _ctx.g = 0.0023297121342f;
   _ctx.R = 1.f;
   _ctx.inv_den = (1.f / (1.f + (_ctx.g * _ctx.g)));
}

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0 _ctx;
   _ctx.write_pos = 0;
   float_init_array(675,0.f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

void Rescomb_delay_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0_init(_output_);
   return ;
}

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv){
   _ctx.write_pos = ((_ctx.write_pos + 1) % 675);
   float_set(_ctx.buffer,_ctx.write_pos,x);
   float r_size;
   r_size = 675.f;
   float r_index;
   r_index = fmodf((int_to_float(_ctx.write_pos) + (- Util_cvToperiod(cv))),r_size);
   uint8_t _cond_324;
   _cond_324 = (r_index < 0.f);
   if(_cond_324){ r_index = (r_size + r_index); }
   int t1;
   t1 = (float_to_int(floorf(r_index)) % 675);
   int t2;
   t2 = ((t1 + 1) % 675);
   float decimal;
   decimal = (r_index + (- int_to_float(t1)));
   float x1;
   x1 = float_get(_ctx.buffer,t1);
   float x2;
   x2 = float_get(_ctx.buffer,t2);
   float ret;
   ret = (((x2 + (- x1)) * decimal) + x1);
   return ret;
}

float Rescomb_toneCurve(float tone){
   int index;
   index = int_clip(float_to_int((26.25f * (tone + 1.2f))),0,63);
   return (float_wrap_array(Rescomb_toneCurve_c0)[index] + (tone * (float_wrap_array(Rescomb_toneCurve_c1)[index] + (float_wrap_array(Rescomb_toneCurve_c2)[index] * tone))));
}

void Rescomb__ctx_type_2_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2 _ctx;
   _ctx.stone = 0.f;
   _ctx.output = 0.f;
   Rescomb__ctx_type_0_init(_ctx._inst321);
   Util__ctx_type_10_init(_ctx._inst320);
   Util__ctx_type_4_init(_ctx._inst318);
   _output_ = _ctx;
   return ;
}

void Rescomb_do_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2_init(_output_);
   return ;
}

float Rescomb_do(Rescomb__ctx_type_2 &_ctx, float in, float cv, float tone, float res){
   uint8_t _cond_326;
   _cond_326 = Util_change(_ctx._inst318,tone);
   if(_cond_326){
      _ctx.stone = Rescomb_toneCurve(tone);
   }
   float feedback;
   feedback = Util_dcblock(_ctx._inst320,(_ctx.output * res));
   float saturated_input;
   saturated_input = Saturate_soft_process((in + feedback));
   _ctx.output = ((_ctx.stone * Rescomb_delay(_ctx._inst321,saturated_input,cv)) + in);
   return Saturate_soft_process(_ctx.output);
}

void Rescomb__ctx_type_3_init(Rescomb__ctx_type_3 &_output_){
   Rescomb__ctx_type_3 _ctx;
   Rescomb__ctx_type_2_init(_ctx._inst323);
   _output_ = _ctx;
   return ;
}

void Rescomb_process_init(Rescomb__ctx_type_3 &_output_){
   Rescomb__ctx_type_3_init(_output_);
   return ;
}

float Rescomb_process(Rescomb__ctx_type_3 &_ctx, float in, float cv, float tone, float res){
   return Rescomb_do(_ctx._inst323,in,cv,tone,res);
}

void Phd__ctx_type_0_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0 _ctx;
   _ctx.pre_phase1 = 0.f;
   Phase__ctx_type_0_init(_ctx._inst330);
   Util__ctx_type_11_init(_ctx._inst329);
   Phase__ctx_type_0_init(_ctx._inst328);
   _output_ = _ctx;
   return ;
}

void Phd_process_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

float Phd_process(Phd__ctx_type_0 &_ctx, float cv, float detune){
   float phase1;
   phase1 = Phase_process(_ctx._inst328,cv,0.f);
   float comp;
   comp = (1.f + (- phase1));
   float reset;
   reset = (_ctx.pre_phase1 + (- phase1));
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phase_process(_ctx._inst330,(cv + Util_smooth(_ctx._inst329,(detune * 0.5f))),reset);
   float sine;
   sine = Tables_nsine(phase2);
   return (sine * comp);
}

int Minblep_minblep_samples(){return 678;}

float Minblep_minblep(int ch, int i){
   if(ch == 0){ return float_wrap_array(Minblep_minblep_chan_0)[(i % 678)]; }
   return 0.f;
}

void Minblep__ctx_type_2_init(Minblep__ctx_type_2 &_output_){
   Minblep__ctx_type_2 _ctx;
   _ctx.playing = 0;
   _ctx.index = 0;
   Util__ctx_type_2_init(_ctx._inst332);
   _output_ = _ctx;
   return ;
}

void Minblep_minblep_play_init(Minblep__ctx_type_2 &_output_){
   Minblep__ctx_type_2_init(_output_);
   return ;
}

float Minblep_minblep_play(Minblep__ctx_type_2 &_ctx, uint8_t trigger){
   uint8_t _cond_346;
   _cond_346 = Util_edge(_ctx._inst332,trigger);
   if(_cond_346){
      _ctx.index = 0;
      _ctx.playing = 1;
   }
   float out;
   out = 0.f;
   if(_ctx.playing){
      uint8_t _cond_347;
      _cond_347 = (_ctx.index >= Minblep_minblep_samples());
      if(_cond_347){
         _ctx.playing = 0;
         _ctx.index = 0;
      }
      else
      {
         _ctx.index = (_ctx.index + 16);
      }
      if(_ctx.playing){ out = Minblep_minblep(0,_ctx.index); }
      else
      { out = 0.f; }
   }
   return out;
}

void Minblep__ctx_type_3_init(Minblep__ctx_type_3 &_output_){
   Minblep__ctx_type_3 _ctx;
   _ctx.pre_phase = 0.f;
   _ctx.active_blep = 0;
   _ctx.acc = 0.f;
   Minblep__ctx_type_2_init(_ctx._inst344);
   Minblep__ctx_type_2_init(_ctx._inst343);
   Minblep__ctx_type_2_init(_ctx._inst342);
   Minblep__ctx_type_2_init(_ctx._inst341);
   Util__ctx_type_2_init(_ctx._inst339);
   Phase__ctx_type_0_init(_ctx._inst338);
   _output_ = _ctx;
   return ;
}

void Minblep_minblep_step_init(Minblep__ctx_type_3 &_output_){
   Minblep__ctx_type_3_init(_output_);
   return ;
}

float Minblep_minblep_step(Minblep__ctx_type_3 &_ctx, float cv, uint8_t reset){
   float phase;
   phase = Phase_process(_ctx._inst338,cv,0.f);
   uint8_t wrap;
   wrap = ((_ctx.pre_phase + (- phase)) > 0.5f);
   _ctx.pre_phase = phase;
   uint8_t _cond_348;
   _cond_348 = (wrap || Util_edge(_ctx._inst339,reset));
   if(_cond_348){
      _ctx.active_blep = ((_ctx.active_blep + 1) % 4);
   }
   float o0;
   o0 = Minblep_minblep_play(_ctx._inst341,(_ctx.active_blep == 0));
   float o1;
   o1 = Minblep_minblep_play(_ctx._inst342,(_ctx.active_blep == 1));
   float o2;
   o2 = Minblep_minblep_play(_ctx._inst343,(_ctx.active_blep == 2));
   float o3;
   o3 = Minblep_minblep_play(_ctx._inst344,(_ctx.active_blep == 3));
   float pulses;
   pulses = (o0 + (- o1) + o2 + (- o3));
   _ctx.acc = ((_ctx.acc * 0.996f) + (20.f * pulses));
   return _ctx.acc;
}

void Minblep__ctx_type_4_init(Minblep__ctx_type_4 &_output_){
   Minblep__ctx_type_4 _ctx;
   Minblep__ctx_type_3_init(_ctx.o);
   _output_ = _ctx;
   return ;
}

void Minblep_process_init(Minblep__ctx_type_4 &_output_){
   Minblep__ctx_type_4_init(_output_);
   return ;
}

float Minblep_process(Minblep__ctx_type_4 &_ctx, float cv, float reset){
   uint8_t breset;
   breset = (reset > 0.5f);
   float out1;
   out1 = Minblep_minblep_step(_ctx.o,cv,breset);
   float out2;
   out2 = Minblep_minblep_step(_ctx.o,cv,breset);
   float out3;
   out3 = Minblep_minblep_step(_ctx.o,cv,breset);
   float out4;
   out4 = Minblep_minblep_step(_ctx.o,cv,breset);
   return ((out1 + out2 + out3 + out4) * 0.25f);
}

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0 _ctx;
   _ctx.x4 = 0.f;
   _ctx.x3 = 0.f;
   _ctx.x2 = 0.f;
   _output_ = _ctx;
   return ;
}

void Lfo_soft_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0_init(_output_);
   return ;
}

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1){
   float o;
   o = ((x1 + _ctx.x2 + _ctx.x3 + _ctx.x4) * 0.25f);
   float _tmp_357_0;
   _tmp_357_0 = x1;
   float _tmp_357_1;
   _tmp_357_1 = _ctx.x2;
   float _tmp_357_2;
   _tmp_357_2 = _ctx.x3;
   _ctx.x2 = _tmp_357_0;
   _ctx.x3 = _tmp_357_1;
   _ctx.x4 = _tmp_357_2;
   return o;
}

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Lfo__ctx_type_0_init(_ctx._inst356);
   Util__ctx_type_2_init(_ctx._inst354);
   Util__ctx_type_20_init(_ctx._inst353);
   Util__ctx_type_4_init(_ctx._inst351);
   _output_ = _ctx;
   return ;
}

void Lfo_process_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset){
   uint8_t _cond_358;
   _cond_358 = Util_change(_ctx._inst351,cv);
   if(_cond_358){
      _ctx.rate = Util_cvToRate(_ctx._inst353,(cv + -0.3f));
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   uint8_t _cond_360;
   _cond_360 = (_ctx.phase > 2.f);
   if(_cond_360){ _ctx.phase = (_ctx.phase + -2.f); }
   uint8_t breset;
   breset = (reset > 0.f);
   uint8_t _cond_359;
   _cond_359 = Util_edge(_ctx._inst354,breset);
   if(_cond_359){
      _ctx.phase = 0.f;
   }
   float tmp;
   tmp = (_ctx.phase + -1.f);
   float o;
   uint8_t _cond_361;
   _cond_361 = (shape < 1.f);
   if(_cond_361){ o = tmp; }
   else
   {
      uint8_t _cond_362;
      _cond_362 = (shape < 2.f);
      if(_cond_362){ o = ((fabsf(tmp) * 2.f) + -1.f); }
      else
      {
         uint8_t _cond_363;
         _cond_363 = (tmp > 0.f);
         if(_cond_363){ o = 1.f; }
         else
         { o = 0.f; }
      }
   }
   return Lfo_soft(_ctx._inst356,o);
}

float Fold_do(float signal, float level){
   float sign;
   uint8_t _cond_366;
   _cond_366 = (signal > 0.f);
   if(_cond_366){ sign = 1.f; }
   else
   { sign = -1.f; }
   float amp;
   amp = (fabsf(signal) * ((8.f * level) + 1.f));
   float base;
   base = floorf(amp);
   float delta;
   delta = (amp + (- base));
   float out;
   uint8_t _cond_367;
   _cond_367 = ((float_to_int(base) % 2) != 0);
   if(_cond_367){ out = (1.f + (- delta)); }
   else
   { out = delta; }
   return (sign * out);
}

float Fold_process(float signal, float level){
   return Fold_do(signal,level);
}

float Clipper_process(float x){
   return Util_cubic_clipper(x);
}

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0 _ctx;
   _ctx.scale = 0.f;
   _ctx.m = 0;
   Util__ctx_type_4_init(_ctx._inst370);
   Blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase){
   uint8_t _cond_392;
   _cond_392 = Util_change(_ctx._inst370,cv);
   if(_cond_392){
      _ctx.m = ((2 * float_to_int(Util_cvToperiod(cv))) + 1);
      _ctx.scale = (2.f * Util_cvToperiod(cv));
   }
   float pi_phase;
   pi_phase = (phase * 0.5f);
   float denominator;
   denominator = Tables_nsine(pi_phase);
   float out;
   out = 0.f;
   uint8_t _cond_393;
   _cond_393 = (denominator <= 1e-18f);
   if(_cond_393){
      out = 1.f;
   }
   else
   {
      float m_phase;
      m_phase = fmodf((int_to_float(_ctx.m) * pi_phase),1.f);
      float numerator;
      numerator = Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));
   }
   return out;
}

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

void Blit_pulse_start(Blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 1349.49206955f;
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.state_saw = 0.f;
   _ctx.state_pulse = 0.f;
   _ctx.rate = 0.f;
   _ctx.output = 0.f;
   Util__ctx_type_20_init(_ctx._inst389);
   Util__ctx_type_10_init(_ctx._inst387);
   Blit__ctx_type_0_init(_ctx._inst384);
   Blit__ctx_type_0_init(_ctx._inst383);
   Phase__ctx_type_0_init(_ctx._inst381);
   Util__ctx_type_20_init(_ctx._inst380);
   Util__ctx_type_4_init(_ctx._inst378);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave){
   float fixed_cv;
   fixed_cv = 0.f;
   uint8_t _cond_394;
   _cond_394 = (wave < 1.f);
   if(_cond_394){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = (cv + -0.1f);
   }
   uint8_t _cond_395;
   _cond_395 = Util_change(_ctx._inst378,fixed_cv);
   if(_cond_395){
      _ctx.rate = Util_cvToRate(_ctx._inst380,fixed_cv);
   }
   float phase;
   phase = Phase_process(_ctx._inst381,fixed_cv,0.f);
   float shift05;
   shift05 = (0.5f + (pw * 0.49f));
   float shift;
   shift = (phase + shift05);
   uint8_t _cond_396;
   _cond_396 = (shift > 1.f);
   if(_cond_396){
      shift = (shift + -1.f);
   }
   float pulse1;
   pulse1 = Blit_pulse_train(_ctx._inst383,fixed_cv,phase);
   float pulse2;
   pulse2 = Blit_pulse_train(_ctx._inst384,fixed_cv,shift);
   _ctx.state_pulse = ((_ctx.state_pulse * 0.9995f) + pulse1 + (- pulse2));
   _ctx.state_saw = ((_ctx.state_saw * 0.9995f) + (((pulse1 + pulse2 + (-2.f * _ctx.rate)) / shift05) * 0.5f));
   uint8_t _cond_397;
   _cond_397 = (wave < 1.f);
   if(_cond_397){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = (2.f * _ctx.state_saw);
   }
   _ctx.output = Util_dcblock(_ctx._inst387,_ctx.output);
   return _ctx.output;
}

void Blit_init_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

void Blit_init(Blit__ctx_type_1 &_ctx){
   _ctx.rate = Util_cvToRate(_ctx._inst389,0.f);
}

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   Blit__ctx_type_1_init(_ctx._inst391);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

float Blit_process(Blit__ctx_type_2 &_ctx, float cv, float pw, float wave){
   return Blit_osc_blit(_ctx._inst391,cv,pw,wave);
}

float Bitcrush_factor(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Bitcrush_factor_c0)[index] + (cv * (float_wrap_array(Bitcrush_factor_c1)[index] + (float_wrap_array(Bitcrush_factor_c2)[index] * cv))));
}

float Bitcrush_process(float i, float cv){
   float out;
   out = i;
   uint8_t _cond_402;
   _cond_402 = (cv == 0.f);
   if(_cond_402){
      out = i;
   }
   else
   {
      float b;
      b = Bitcrush_factor(cv);
      int x;
      x = float_to_int((i * b));
      out = (int_to_float(x) / b);
   }
   return out;
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _ctx.hold_phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst406);
   Util__ctx_type_2_init(_ctx._inst404);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r, _tuple___real_real__ &_output_){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.f);
   uint8_t _cond_416;
   _cond_416 = Util_edge(_ctx._inst404,bgate);
   if(_cond_416){
      _ctx.state = reset;
   }
   float resetting;
   uint8_t _cond_425;
   _cond_425 = (_ctx.state == reset);
   if(_cond_425){ resetting = 1.f; }
   else
   { resetting = 0.f; }
   uint8_t _cond_417;
   _cond_417 = Util_edge(_ctx._inst406,(_ctx.out > 1024.f));
   if(_cond_417){
      _ctx.hold_phase = 0.f;
      _ctx.state = hold;
   }
   uint8_t _cond_418;
   _cond_418 = ((_ctx.out < 10.f) && (_ctx.state == reset));
   if(_cond_418){
      _ctx.state = attack;
   }
   uint8_t _cond_419;
   _cond_419 = ((_ctx.hold_phase > 100.f) && (_ctx.state == hold));
   if(_cond_419){
      _ctx.state = release;
   }
   uint8_t _cond_420;
   _cond_420 = (_ctx.state == reset);
   if(_cond_420){
      _ctx.rate = 0.990099009901f;
      _ctx.target = 0.f;
   }
   uint8_t _cond_421;
   _cond_421 = (_ctx.state == attack);
   if(_cond_421){
      _ctx.rate = (1.f / ((100.f * a) + 0.01f));
      _ctx.target = 1228.8f;
   }
   uint8_t _cond_422;
   _cond_422 = (_ctx.state == hold);
   if(_cond_422){
      float hrate;
      hrate = (1.f / ((100.f * h) + 0.01f));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   uint8_t _cond_423;
   _cond_423 = (_ctx.state == release);
   if(_cond_423){
      _ctx.rate = (1.f / ((100.f * r) + 0.01f));
      _ctx.target = 0.f;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005f));
   _tuple___real_real__ _tuple_424;
   {
      _tuple_424.field_0 = float_clip((_ctx.out * 0.0009765625f),0.f,1.f);
      _tuple_424.field_1 = resetting;
   }
   _output_ = _tuple_424;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   Ahr__ctx_type_0_init(_ctx._inst415);
   _output_ = _ctx;
   return ;
}

void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_process(Ahr__ctx_type_1 &_ctx, float gate, float knob1, float knob2, float knob3, _tuple___real_real__ &_output_){
   _tuple___real_real__ _call_427;
   Ahr_do(_ctx._inst415,gate,knob1,knob2,knob3,_call_427);
   _output_ = _call_427;
   return ;
}

void VultEngine__ctx_type_0_init(VultEngine__ctx_type_0 &_output_){
   VultEngine__ctx_type_0 _ctx;
   LPFilter__ctx_type_7_init(_ctx._inst438);
   _output_ = _ctx;
   return ;
}

void VultEngine_LP_filter_init(VultEngine__ctx_type_0 &_output_){
   VultEngine__ctx_type_0_init(_output_);
   return ;
}

float VultEngine_LP_filter(VultEngine__ctx_type_0 &_ctx, float inputIn, float cvMixIn, float resoIn){
   return LPFilter_process(_ctx._inst438,inputIn,cvMixIn,resoIn);
}

void VultEngine__ctx_type_1_init(VultEngine__ctx_type_1 &_output_){
   VultEngine__ctx_type_1 _ctx;
   SVF__ctx_type_3_init(_ctx._inst440);
   _output_ = _ctx;
   return ;
}

void VultEngine_Multi_filter_init(VultEngine__ctx_type_1 &_output_){
   VultEngine__ctx_type_1_init(_output_);
   return ;
}

float VultEngine_Multi_filter(VultEngine__ctx_type_1 &_ctx, float inputIn, float cvMixIn, float resoIn, int mode){
   return SVF_process(_ctx._inst440,inputIn,cvMixIn,resoIn,mode);
}

void VultEngine__ctx_type_2_init(VultEngine__ctx_type_2 &_output_){
   VultEngine__ctx_type_2 _ctx;
   Ad__ctx_type_1_init(_ctx._inst442);
   _output_ = _ctx;
   return ;
}

void VultEngine_Ad_env_init(VultEngine__ctx_type_2 &_output_){
   VultEngine__ctx_type_2_init(_output_);
   return ;
}

float VultEngine_Ad_env(VultEngine__ctx_type_2 &_ctx, float gateIn, float attackIn, float decayIn){
   return Ad_process(_ctx._inst442,gateIn,attackIn,decayIn);
}

void VultEngine__ctx_type_3_init(VultEngine__ctx_type_3 &_output_){
   VultEngine__ctx_type_3 _ctx;
   Ahr__ctx_type_1_init(_ctx._inst444);
   _output_ = _ctx;
   return ;
}

void VultEngine_Ahr_env_init(VultEngine__ctx_type_3 &_output_){
   VultEngine__ctx_type_3_init(_output_);
   return ;
}

void VultEngine_Ahr_env(VultEngine__ctx_type_3 &_ctx, float gateIn, float attackIn, float holdIn, float releaseIn, _tuple___real_real__ &_output_){
   _tuple___real_real__ _call_484;
   Ahr_process(_ctx._inst444,gateIn,attackIn,holdIn,releaseIn,_call_484);
   _output_ = _call_484;
   return ;
}

void VultEngine__ctx_type_4_init(VultEngine__ctx_type_4 &_output_){
   VultEngine__ctx_type_4 _ctx;
   Adsr__ctx_type_1_init(_ctx._inst446);
   _output_ = _ctx;
   return ;
}

void VultEngine_Adsr_env_init(VultEngine__ctx_type_4 &_output_){
   VultEngine__ctx_type_4_init(_output_);
   return ;
}

float VultEngine_Adsr_env(VultEngine__ctx_type_4 &_ctx, float gateIn, float attackIn, float decayIn, float sustainIn, float releaseIn){
   return Adsr_process(_ctx._inst446,gateIn,attackIn,decayIn,sustainIn,releaseIn);
}

float VultEngine_bitcrush(float audioIn, float crushIn){
   return Bitcrush_process(audioIn,crushIn);
}

void VultEngine__ctx_type_6_init(VultEngine__ctx_type_6 &_output_){
   VultEngine__ctx_type_6 _ctx;
   Blit__ctx_type_2_init(_ctx._inst449);
   _output_ = _ctx;
   return ;
}

void VultEngine_blit_init(VultEngine__ctx_type_6 &_output_){
   VultEngine__ctx_type_6_init(_output_);
   return ;
}

float VultEngine_blit(VultEngine__ctx_type_6 &_ctx, float cvIn, float pwIn, float waveIn){
   return Blit_process(_ctx._inst449,cvIn,pwIn,waveIn);
}

float VultEngine_clipper(float audioIn){
   return Clipper_process(audioIn);
}

float VultEngine_fold(float audioIn, float levelIn){
   return Fold_process(audioIn,levelIn);
}

void VultEngine__ctx_type_9_init(VultEngine__ctx_type_9 &_output_){
   VultEngine__ctx_type_9 _ctx;
   Lfo__ctx_type_1_init(_ctx._inst453);
   _output_ = _ctx;
   return ;
}

void VultEngine_lfo_init(VultEngine__ctx_type_9 &_output_){
   VultEngine__ctx_type_9_init(_output_);
   return ;
}

float VultEngine_lfo(VultEngine__ctx_type_9 &_ctx, float cvIn, float shapeIn, float resetIn){
   return Lfo_process(_ctx._inst453,cvIn,shapeIn,resetIn);
}

void VultEngine__ctx_type_10_init(VultEngine__ctx_type_10 &_output_){
   VultEngine__ctx_type_10 _ctx;
   Minblep__ctx_type_4_init(_ctx._inst455);
   _output_ = _ctx;
   return ;
}

void VultEngine_minblep_init(VultEngine__ctx_type_10 &_output_){
   VultEngine__ctx_type_10_init(_output_);
   return ;
}

float VultEngine_minblep(VultEngine__ctx_type_10 &_ctx, float cvIn, float resetIn){
   return Minblep_process(_ctx._inst455,cvIn,resetIn);
}

void VultEngine__ctx_type_11_init(VultEngine__ctx_type_11 &_output_){
   VultEngine__ctx_type_11 _ctx;
   Noise__ctx_type_1_init(_ctx._inst457);
   _output_ = _ctx;
   return ;
}

void VultEngine_noise_init(VultEngine__ctx_type_11 &_output_){
   VultEngine__ctx_type_11_init(_output_);
   return ;
}

float VultEngine_noise(VultEngine__ctx_type_11 &_ctx, float colorIn){
   return Noise_process(_ctx._inst457,colorIn);
}

void VultEngine__ctx_type_12_init(VultEngine__ctx_type_12 &_output_){
   VultEngine__ctx_type_12 _ctx;
   Phase__ctx_type_0_init(_ctx._inst459);
   _output_ = _ctx;
   return ;
}

void VultEngine_phase_init(VultEngine__ctx_type_12 &_output_){
   VultEngine__ctx_type_12_init(_output_);
   return ;
}

float VultEngine_phase(VultEngine__ctx_type_12 &_ctx, float cvIn, float resetIn){
   return Phase_process(_ctx._inst459,cvIn,resetIn);
}

void VultEngine__ctx_type_13_init(VultEngine__ctx_type_13 &_output_){
   VultEngine__ctx_type_13 _ctx;
   Phd__ctx_type_0_init(_ctx._inst461);
   _output_ = _ctx;
   return ;
}

void VultEngine_phd_init(VultEngine__ctx_type_13 &_output_){
   VultEngine__ctx_type_13_init(_output_);
   return ;
}

float VultEngine_phd(VultEngine__ctx_type_13 &_ctx, float cvIn, float detuneIn){
   return Phd_process(_ctx._inst461,cvIn,detuneIn);
}

void VultEngine__ctx_type_14_init(VultEngine__ctx_type_14 &_output_){
   VultEngine__ctx_type_14 _ctx;
   Rescomb__ctx_type_3_init(_ctx._inst463);
   _output_ = _ctx;
   return ;
}

void VultEngine_rescomb_init(VultEngine__ctx_type_14 &_output_){
   VultEngine__ctx_type_14_init(_output_);
   return ;
}

float VultEngine_rescomb(VultEngine__ctx_type_14 &_ctx, float audioIn, float cvIn, float toneIn, float resIn){
   return Rescomb_process(_ctx._inst463,audioIn,cvIn,toneIn,resIn);
}

float VultEngine_saturate(float audioIn){
   return Saturate_process(audioIn);
}

void VultEngine__ctx_type_16_init(VultEngine__ctx_type_16 &_output_){
   VultEngine__ctx_type_16 _ctx;
   Saw_blit__ctx_type_2_init(_ctx._inst466);
   _output_ = _ctx;
   return ;
}

void VultEngine_saw_blit_init(VultEngine__ctx_type_16 &_output_){
   VultEngine__ctx_type_16_init(_output_);
   return ;
}

float VultEngine_saw_blit(VultEngine__ctx_type_16 &_ctx, float cvIn){
   return Saw_blit_process(_ctx._inst466,cvIn);
}

void VultEngine__ctx_type_17_init(VultEngine__ctx_type_17 &_output_){
   VultEngine__ctx_type_17 _ctx;
   Saw_eptr__ctx_type_0_init(_ctx._inst468);
   _output_ = _ctx;
   return ;
}

void VultEngine_saw_eptr_init(VultEngine__ctx_type_17 &_output_){
   VultEngine__ctx_type_17_init(_output_);
   return ;
}

float VultEngine_saw_eptr(VultEngine__ctx_type_17 &_ctx, float cvIn){
   return Saw_eptr_process(_ctx._inst468,cvIn);
}

void VultEngine__ctx_type_18_init(VultEngine__ctx_type_18 &_output_){
   VultEngine__ctx_type_18 _ctx;
   Saw_ptr1__ctx_type_0_init(_ctx._inst470);
   _output_ = _ctx;
   return ;
}

void VultEngine_saw_ptr1_init(VultEngine__ctx_type_18 &_output_){
   VultEngine__ctx_type_18_init(_output_);
   return ;
}

float VultEngine_saw_ptr1(VultEngine__ctx_type_18 &_ctx, float cvIn){
   return Saw_ptr1_process(_ctx._inst470,cvIn);
}

void VultEngine__ctx_type_19_init(VultEngine__ctx_type_19 &_output_){
   VultEngine__ctx_type_19 _ctx;
   Saw_ptr2__ctx_type_0_init(_ctx._inst472);
   _output_ = _ctx;
   return ;
}

void VultEngine_saw_ptr2_init(VultEngine__ctx_type_19 &_output_){
   VultEngine__ctx_type_19_init(_output_);
   return ;
}

float VultEngine_saw_ptr2(VultEngine__ctx_type_19 &_ctx, float cvIn){
   return Saw_ptr2_process(_ctx._inst472,cvIn);
}

void VultEngine__ctx_type_20_init(VultEngine__ctx_type_20 &_output_){
   VultEngine__ctx_type_20 _ctx;
   Sawcore__ctx_type_1_init(_ctx._inst474);
   _output_ = _ctx;
   return ;
}

void VultEngine_sawcore_init(VultEngine__ctx_type_20 &_output_){
   VultEngine__ctx_type_20_init(_output_);
   return ;
}

float VultEngine_sawcore(VultEngine__ctx_type_20 &_ctx, float cvIn, float resetIn){
   return Sawcore_process(_ctx._inst474,cvIn,resetIn);
}

void VultEngine__ctx_type_21_init(VultEngine__ctx_type_21 &_output_){
   VultEngine__ctx_type_21 _ctx;
   Short_delay__ctx_type_2_init(_ctx._inst476);
   _output_ = _ctx;
   return ;
}

void VultEngine_short_delay_init(VultEngine__ctx_type_21 &_output_){
   VultEngine__ctx_type_21_init(_output_);
   return ;
}

float VultEngine_short_delay(VultEngine__ctx_type_21 &_ctx, float audioIn, float timeIn, float feedbackIn){
   return Short_delay_process(_ctx._inst476,audioIn,timeIn,feedbackIn);
}

void VultEngine__ctx_type_22_init(VultEngine__ctx_type_22 &_output_){
   VultEngine__ctx_type_22 _ctx;
   Sine__ctx_type_0_init(_ctx._inst478);
   _output_ = _ctx;
   return ;
}

void VultEngine_sine_init(VultEngine__ctx_type_22 &_output_){
   VultEngine__ctx_type_22_init(_output_);
   return ;
}

float VultEngine_sine(VultEngine__ctx_type_22 &_ctx, float cvIn, float resetIn){
   return Sine_process(_ctx._inst478,cvIn,resetIn);
}

void VultEngine__ctx_type_23_init(VultEngine__ctx_type_23 &_output_){
   VultEngine__ctx_type_23 _ctx;
   Tricore__ctx_type_0_init(_ctx._inst480);
   _output_ = _ctx;
   return ;
}

void VultEngine_tricore_init(VultEngine__ctx_type_23 &_output_){
   VultEngine__ctx_type_23_init(_output_);
   return ;
}

float VultEngine_tricore(VultEngine__ctx_type_23 &_ctx, float cvIn, float resetIn, float disableIn){
   return Tricore_process(_ctx._inst480,cvIn,resetIn,disableIn);
}

void VultEngine__ctx_type_24_init(VultEngine__ctx_type_24 &_output_){
   VultEngine__ctx_type_24 _ctx;
   Swept__ctx_type_0_init(_ctx._inst482);
   _output_ = _ctx;
   return ;
}

void VultEngine_swept_init(VultEngine__ctx_type_24 &_output_){
   VultEngine__ctx_type_24_init(_output_);
   return ;
}

float VultEngine_swept(VultEngine__ctx_type_24 &_ctx, float gateIn, float startIn, float endIn, float rateIn){
   return Swept_process(_ctx._inst482,gateIn,startIn,endIn,rateIn);
}

float VultEngine_saturate_soft(float audioIn){
   return Saturate_soft_process(audioIn);
}


